!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module tdlpacklib ! in 
    interface  ! in :tdlpacklib
        module tdlpacklib_mod ! in :tdlpacklib:tdlpack_mod.f90
            integer, parameter,public,optional,depend(l3264b) :: l3264b=storage_size(l3264b)
            integer, parameter,public,optional,depend(l3264b) :: l3264w=(64/l3264b)
            integer, parameter,public,optional,depend(l3264b) :: nbypwd=(l3264b/4)
        end module tdlpacklib_mod
        subroutine closefile(kstdout,lun,ftype,ier) ! in :tdlpacklib:closefile.f90
            integer intent(in) :: kstdout
            integer intent(in) :: lun
            integer intent(in) :: ftype
            integer intent(out) :: ier
        end subroutine closefile
        subroutine openfile(kstdout,file,mode,lun,byteorder,ftype,ier,ra_template) ! in :tdlpacklib:openfile.f90
            integer intent(in) :: kstdout
            character*(*) intent(in) :: file
            character*(*) intent(in) :: mode
            integer intent(out) :: lun
            integer intent(in,out) :: byteorder
            integer intent(in,out) :: ftype
            integer intent(out) :: ier
            character*(*), optional,intent(in) :: ra_template
        end subroutine openfile
        subroutine readfile(kstdout,file,lun,nd5,l3264b,ftype,ioctet,ipack,ier,id) ! in :tdlpacklib:readfile.f90
            integer intent(in) :: kstdout
            character*(*) intent(in) :: file
            integer intent(in) :: lun
            integer intent(in) :: nd5
            integer intent(in) :: l3264b
            integer intent(in) :: ftype
            integer intent(out) :: ioctet
            integer dimension(nd5),intent(out),depend(nd5) :: ipack
            integer intent(out) :: ier
            integer, optional,dimension(4),intent(in) :: id
        end subroutine readfile
        subroutine writefile(kstdout,file,lun,ftype,nd5,ipack,ier,nreplace,ncheck) ! in :tdlpacklib:writefile.f90
            integer intent(in) :: kstdout
            character*(*) intent(in) :: file
            integer intent(in) :: lun
            integer, optional,intent(in),check(len(ipack)>=nd5),depend(ipack) :: nd5=len(ipack)
            integer intent(in) :: ftype
            integer dimension(nd5),intent(in) :: ipack
            integer intent(out) :: ier
            integer, optional,intent(in) :: nreplace
            integer, optional,intent(in) :: ncheck
        end subroutine writefile
        subroutine trail(kfildo,kfilio,l3264b,l3264w,ntotby,ntotrc,ier) ! in :tdlpacklib:trail.f
            integer intent(in) :: kfildo
            integer intent(in) :: kfilio
            integer intent(in) :: l3264b
            integer intent(in) :: l3264w
            integer :: ntotby
            integer :: ntotrc
            integer intent(out) :: ier
        end subroutine trail
        subroutine gridij_to_latlon(kstdout,nx,ny,mproj,xmeshl,orient,xlat,xlatll,xlonll,lats,lons,ier) ! in :tdlpacklib:gridij_to_latlon.f90
            integer intent(in) :: kstdout
            integer intent(in) :: nx
            integer intent(in) :: ny
            integer intent(in) :: mproj
            real intent(in) :: xmeshl
            real intent(in) :: orient
            real intent(in) :: xlat
            real intent(in) :: xlatll
            real intent(in) :: xlonll
            real dimension(nx,ny),intent(out),depend(nx,ny) :: lats
            real dimension(nx,ny),intent(out),depend(nx,ny) :: lons
            integer intent(out) :: ier
        end subroutine gridij_to_latlon
        subroutine latlon_to_gridij(kstdout,mproj,xlatll,xlonll,orient,xmeshl,xlat,alat,alon,xi,yj) ! in :tdlpacklib:latlon_to_gridij.f90
            integer, intent(in) :: kstdout
            integer, intent(in) :: mproj
            real, intent(in) :: xlatll
            real, intent(in) :: xlonll
            real, intent(in) :: orient
            real, intent(in) :: xmeshl
            real, intent(in) :: xlat
            real, intent(in) :: alat
            real, intent(in) :: alon
            real, intent(out) :: xi
            real, intent(out) :: yj
        end subroutine latlon_to_gridij
        subroutine clfilm(kfildo,kfilx,ier) ! in :tdlpacklib:clfilm.f
            integer intent(in) :: kfildo
            integer intent(in) :: kfilx
            integer intent(out) :: ier
            integer dimension(2) :: nopen
            integer dimension(2,2) :: lstrd
            character dimension(2,1024),intent(c) :: cfile
            integer dimension(2) :: kuse
            integer dimension(2) :: nirw
            integer dimension(7,2) :: master
            integer dimension(6,2) :: noprec
            integer dimension(6,840,2) :: keyrec
            character dimension(20,1024),intent(c) :: clist
            integer dimension(20) :: nfilsz
            integer :: kount
            integer dimension(2) :: nraend
            common /argc/ nopen,lstrd,cfile,kuse,nirw,master,noprec,keyrec,clist,nfilsz,kount,nraend
        end subroutine clfilm
        subroutine openlog(kstdout,path) ! in :tdlpacklib:openlog.f90
            integer intent(in) :: kstdout
            character*(*) optional,intent(in) :: path
        end subroutine openlog
        subroutine unpack_meta_wrapper(nd5,ipack,nd7,is0,is1,is2,is4,ier) ! in :tdlpacklib:unpack_wrapper.f90
            integer(kind=4), optional,intent(in),check(shape(ipack, 0) == nd5),depend(ipack) :: nd5=shape(ipack, 0)
            integer(kind=4) dimension(nd5),intent(in) :: ipack
            integer(kind=4) intent(in) :: nd7
            integer(kind=4) dimension(nd7),intent(out),depend(nd7) :: is0
            integer(kind=4) dimension(nd7),intent(out),depend(nd7) :: is1
            integer(kind=4) dimension(nd7),intent(out),depend(nd7) :: is2
            integer(kind=4) dimension(nd7),intent(out),depend(nd7) :: is4
            integer(kind=4) intent(out) :: ier
        end subroutine unpack_meta_wrapper
        subroutine unpack_data_wrapper(nd5,ipack,nd7,is0,is1,is2,is4,data,ier) ! in :tdlpacklib:unpack_wrapper.f90
            integer(kind=4), optional,intent(in),check(shape(ipack, 0) == nd5),depend(ipack) :: nd5=shape(ipack, 0)
            integer(kind=4) dimension(nd5),intent(in) :: ipack
            integer(kind=4) intent(in) :: nd7
            integer(kind=4) dimension(nd7),intent(out),depend(nd7) :: is0
            integer(kind=4) dimension(nd7),intent(out),depend(nd7) :: is1
            integer(kind=4) dimension(nd7),intent(out),depend(nd7) :: is2
            integer(kind=4) dimension(nd7),intent(out),depend(nd7) :: is4
            real(kind=4) dimension(nd5),intent(out),depend(nd5) :: data
            integer(kind=4) intent(out) :: ier
        end subroutine unpack_data_wrapper
        subroutine pack1d_wrapper(nd7,is0,is1,is2,is4,nd,data,nd5,ipack,ioctet,ier) ! in :tdlpacklib:pack_wrapper.f90
            integer(kind=4), optional,intent(in),check(shape(is0, 0) == nd7),depend(is0) :: nd7=shape(is0, 0)
            integer(kind=4) dimension(nd7),intent(in) :: is0
            integer(kind=4) dimension(nd7),intent(in),depend(nd7) :: is1
            integer(kind=4) dimension(nd7),intent(in),depend(nd7) :: is2
            integer(kind=4) dimension(nd7),intent(in),depend(nd7) :: is4
            integer(kind=4), optional,intent(in),check(shape(data, 0) == nd),depend(data) :: nd=shape(data, 0)
            real(kind=4) dimension(nd),intent(in) :: data
            integer(kind=4) intent(in) :: nd5
            integer(kind=4) dimension(nd5),intent(out),depend(nd5) :: ipack
            integer(kind=4) intent(out) :: ioctet
            integer(kind=4) intent(out) :: ier
        end subroutine pack1d_wrapper
        subroutine pack2d_wrapper(nd7,is0,is1,is2,is4,nx,ny,data,nd5,ipack,ioctet,ier) ! in :tdlpacklib:pack_wrapper.f90
            integer(kind=4), optional,intent(in),check(shape(is0, 0) == nd7),depend(is0) :: nd7=shape(is0, 0)
            integer(kind=4) dimension(nd7),intent(in) :: is0
            integer(kind=4) dimension(nd7),intent(in),depend(nd7) :: is1
            integer(kind=4) dimension(nd7),intent(in),depend(nd7) :: is2
            integer(kind=4) dimension(nd7),intent(in),depend(nd7) :: is4
            integer(kind=4), optional,intent(in),check(shape(data, 0) == nx),depend(data) :: nx=shape(data, 0)
            integer(kind=4), optional,intent(in),check(shape(data, 1) == ny),depend(data) :: ny=shape(data, 1)
            real(kind=4) dimension(nx,ny),intent(in) :: data
            integer(kind=4) intent(in) :: nd5
            integer(kind=4) dimension(nd5),intent(out),depend(nd5) :: ipack
            integer(kind=4) intent(out) :: ioctet
            integer(kind=4) intent(out) :: ier
        end subroutine pack2d_wrapper
        subroutine createra(kstdout,file,l3264b,lun,maxent,nbytes,ier) ! in :tdlpacklib:createra.f90
            integer intent(in) :: kstdout
            character*(*) intent(in) :: file
            integer intent(in) :: l3264b
            integer intent(in) :: lun
            integer intent(in) :: maxent
            integer intent(in) :: nbytes
            integer intent(out) :: ier
        end subroutine createra
        subroutine writera(kfildo,kfilx,cfilx,id,nd5,ipack,nrepla,ncheck,ier) ! in :tdlpacklib:writera.f90
            integer intent(in) :: kfildo
            integer intent(in) :: kfilx
            character*(*) intent(in) :: cfilx
            integer dimension(4),intent(in) :: id
            integer, optional,intent(in),check(shape(ipack, 0) == nd5),depend(ipack) :: nd5=shape(ipack, 0)
            integer dimension(nd5),intent(in) :: ipack
            integer intent(in) :: nrepla
            integer intent(in) :: ncheck
            integer intent(out) :: ier
        end subroutine writera
        subroutine writera_char(kfildo,kfilx,cfilx,id,nd5,ipack,nrepla,ncheck,ier) ! in :tdlpacklib:writera.f90
            integer intent(in) :: kfildo
            integer intent(in) :: kfilx
            character*(*) intent(in) :: cfilx
            integer dimension(4),intent(in) :: id
            integer, optional,intent(in),check(shape(ipack, 0) == nd5),depend(ipack) :: nd5=shape(ipack, 0)
            character(len=4) dimension(nd5),intent(in) :: ipack
            integer intent(in) :: nrepla
            integer intent(in) :: ncheck
            integer intent(out) :: ier
        end subroutine writera_char
        subroutine writesq_station_record(kfildo,kfilio,nd5,ipack,ntotby,ntotrc,ier) ! in :tdlpacklib:writesq.f90
            integer intent(in) :: kfildo
            integer intent(in) :: kfilio
            integer, optional,intent(in),check(shape(ipack, 0) == nd5),depend(ipack) :: nd5=shape(ipack, 0)
            character(len=8) dimension(nd5),intent(in) :: ipack
            integer intent(in,out) :: ntotby
            integer intent(in,out) :: ntotrc
            integer intent(out) :: ier
        end subroutine writesq_station_record
    end interface 
end python module tdlpacklib

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
