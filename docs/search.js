window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "tdlpackio", "modulename": "tdlpackio", "kind": "module", "doc": "<h1 id=\"introduction\">Introduction</h1>\n\n<p>tdlpackio is a Python interface to reading/writing TDLPACK files via official\nMOS-2000 (MOS2K) Fortran-based source files.  The necessary MOS2K source files are included\nin this package and are available as module, tdlpacklib.</p>\n\n<p>TDLPACK is a GRIB-like binary data format that is exclusive to MOS2K Fortran-based\nsofftware system.  This software system was developed at the Meteorological Development\nLaboratory (MDL) within NOAA/NWS and its primary purpose is to perform statistical\npost-processing of meteorological data.</p>\n\n<p>TDLPACK-formatted data are contained in two type of Fortran-based files;\nsequential or random-access.  Sequential files are variable length, record-based, and unformatted.\nRandom-access files are fixed-length and direct-access.  pytdlpack accommodates reading\nand writing of both types of TDLPACK files.</p>\n\n<p>TDLPACK format is based on the World Meteorological Organizations (WMO) GRIdded Binary (GRIB)\ncode, but has been tailored to MDL needs for data -- mainly the ability to store 1D (vector),\ndatasets such as station observations, along with 2D grids.</p>\n\n<p>There also exists two other types of records in a TDLPACK file: station call letter record\nand trailer record.  A station call letter record can exist in both types of TDLPACK files\nand contains a stream of alphanumeric characters (<code>CHARACTER(LEN=8)</code>).  A trailer record exists\nto signal the MOS2K system that another station call letter record is about to be read or we\nhave reached the end of the file (EOF).  A trailer record is not written to a random-access\nfile.</p>\n\n<p>For more information on the MOS-2000 software system and TDLPACK foremat, user is\nreferred to the official <a href=\"https://www.weather.gov/media/mdl/TDL_OfficeNote00-1.pdf\">MOS-2000 documentation</a>.</p>\n\n<p>In order for pytdlpack to read/write TDLPACK files, we need to compile the necessary MOS2K\nFortran source code into a shared object library.  This is handled by the setup process as the\nFortran source is compiled with f2py (included with Numpy).  The following are some important\nitems to note regarding MOS2K source files included:</p>\n\n<ul>\n<li>Several Fortran 90+ source files have been created to better interface to MOS2K Fortran 77 code.</li>\n<li>The only modification made to MOS2K source files is changing the filename variable, <code>CFILX</code> from\n<code>CHARACTER*60</code> to <code>CHARACTER*1024</code> in the appropropriate subroutines where random-access file IO\noccurs.</li>\n</ul>\n\n<h1 id=\"download\">Download</h1>\n\n<ul>\n<li>Latest code from <a href=\"https://github.com/eengl/pytdlpack\">github repository</a>.</li>\n<li>Latest <a href=\"https://github.com/eengl/pytdlpack/releases\">releases</a> on GitHub.</li>\n<li><a href=\"https://pypi.org/project/pytdlpack\">PyPI</a></li>\n</ul>\n\n<h1 id=\"requires\">Requires</h1>\n\n<ul>\n<li>Python 3.6+</li>\n<li><a href=\"http://numpy.scipy.org\">numpy array module</a>, version 1.12 or later.</li>\n<li><a href=\"https://pypi.python.org/pypi/setuptools\">setuptools</a>, version 18.0 or later.</li>\n<li>GNU or Intel Fortran compiler (if installing from source).</li>\n</ul>\n\n<h1 id=\"install\">Install</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>pip3<span class=\"w\"> </span>install<span class=\"w\"> </span>pytdlpack\n</code></pre>\n</div>\n\n<p><strong>Build and Install from Source</strong></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>python3<span class=\"w\"> </span>setup.py<span class=\"w\"> </span>build_ext<span class=\"w\"> </span>--fcompiler<span class=\"o\">=[</span>gnu95<span class=\"p\">|</span>intelem<span class=\"o\">]</span><span class=\"w\"> </span>build\npython3<span class=\"w\"> </span>setup.py<span class=\"w\"> </span>install<span class=\"w\"> </span><span class=\"o\">[</span>--user<span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>--prefix<span class=\"o\">=</span>PREFIX<span class=\"o\">]</span>\n</code></pre>\n</div>\n\n<h1 id=\"tutorial\">Tutorial</h1>\n\n<ol>\n<li><a href=\"#section1\">Creating/Opening/Closing a TDLPACK file.</a></li>\n<li><a href=\"#section2\">Reading a TDLPACK file.</a></li>\n<li><a href=\"#section3\">Writing a TDLPACK file.</a></li>\n<li><a href=\"#section4\">Creating a TDLPACK Station Record.</a></li>\n<li><a href=\"#section5\">Creating a TDLPACK Record.</a></li>\n<li><a href=\"#section6\">Packing/Unpacking a TDLPACK Record.</a></li>\n</ol>\n\n<h2 id=\"div-idsection11-creatingopeningclosing-a-tdlpack-file\"><div id='section1'>1) Creating/Opening/Closing a TDLPACK file.</h2>\n\n<p>To create a TDLPACK file from Python, you call the <code>pytdlpack.open</code> function and provide the\nfile name and <code>mode='w' or 'a'</code>.  For <code>mode='a'</code>, this will append to an existing file.  When\ncreating a new file, the default file format is <code>'sequential'</code>, but the user can also specify\nthe format with <code>format='sequential' or 'random-access'</code>.  If the new file is random-access,\nthen the user can also specify <code>ra_template='small' or 'large'</code>.  The default is 'small' and\n'large' is recommended for a high-resolution grids (i.e. ~ &gt; 2M total points).</p>\n\n<p>Example: Create a new sequential file:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pytdlpack</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">pytdlpack</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s1\">&#39;test.sq&#39;</span><span class=\"p\">,</span><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;w&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Example: Create a new random-access file:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pytdlpack</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">pytdlpack</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s1\">&#39;test.sq&#39;</span><span class=\"p\">,</span><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;w&#39;</span><span class=\"p\">,</span><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">&#39;random-access&#39;</span><span class=\"p\">,</span><span class=\"n\">ra_template</span><span class=\"o\">=</span><span class=\"s1\">&#39;small&#39;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>To open an existing TDLPACK file, simply provide the filename since the default mode is read.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">pytdlpack</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">pytdlpack</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s1\">&#39;test.sq&#39;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">&#39;</span><span class=\"nc\">pytdlpack</span><span class=\"o\">.</span><span class=\"n\">_pytdlpack</span><span class=\"o\">.</span><span class=\"n\">TdlpackFile</span><span class=\"s1\">&#39;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span>\n<span class=\"n\">byte_order</span> <span class=\"o\">=</span> <span class=\"o\">&gt;</span>\n<span class=\"n\">data_type</span> <span class=\"o\">=</span>\n<span class=\"n\">eof</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"nb\">format</span> <span class=\"o\">=</span> <span class=\"n\">sequential</span>\n<span class=\"n\">fortran_lun</span> <span class=\"o\">=</span> <span class=\"mi\">65535</span>\n<span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"n\">r</span>\n<span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">sq</span>\n<span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">ra_master_key</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"mi\">998672</span>\n</code></pre>\n</div>\n\n<p>To close a TDLPACK file is straightforward.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<h2 id=\"div-idsection22-reading-a-tdlpack-file\"><div id='section2'>2) Reading a TDLPACK file.</h2>\n\n<p>When a TDLPACK file is opened, an instance of class <code>pytdlpack.TdlpackFile</code> is created.\nTo read a record the file, use the class method <code>pytdlpack.TdlpackFile.read</code>.  By default\nonly 1 record is returned and the TDLPACK indentification sections are unpacked.</p>\n\n<p>Example: Reading a gridded TDLPACK record.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span>\n<span class=\"n\">grid_length</span> <span class=\"o\">=</span> <span class=\"mf\">2539.703</span>\n<span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">223254166</span>         <span class=\"mi\">0</span>         <span class=\"mi\">6</span>         <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">ioctet</span> <span class=\"o\">=</span> <span class=\"mi\">998656</span>\n<span class=\"n\">ipack</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1347175508</span>  <span class=\"mi\">255654144</span> <span class=\"mi\">1191249890</span> <span class=\"o\">...</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">is0</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1347175508</span>     <span class=\"mi\">998649</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>\n          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>\n          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>\n          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>\n          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>\n          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>\n          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>\n          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>\n          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">is1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>        <span class=\"mi\">71</span>          <span class=\"mi\">1</span>       <span class=\"mi\">2018</span>         <span class=\"mi\">12</span>          <span class=\"mi\">4</span>          <span class=\"mi\">0</span>\n          <span class=\"mi\">0</span> <span class=\"mi\">2018120400</span>  <span class=\"mi\">223254166</span>          <span class=\"mi\">0</span>          <span class=\"mi\">6</span>          <span class=\"mi\">0</span>\n          <span class=\"mi\">6</span>          <span class=\"mi\">0</span>         <span class=\"mi\">66</span>          <span class=\"mi\">0</span>          <span class=\"mi\">1</span>          <span class=\"mi\">0</span>\n          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>         <span class=\"mi\">32</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>\n          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>\n          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>\n          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>\n          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>\n          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span>          <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">is2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>     <span class=\"mi\">28</span>       <span class=\"mi\">3</span>    <span class=\"mi\">2345</span>    <span class=\"mi\">1597</span>  <span class=\"mi\">192290</span> <span class=\"mi\">2337234</span>  <span class=\"mi\">950000</span> <span class=\"mi\">2539703</span>  <span class=\"mi\">250000</span>\n       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>\n       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>\n       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>\n       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>\n       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">is4</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"mi\">998538</span>      <span class=\"mi\">12</span> <span class=\"mi\">3744965</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>\n       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>\n       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>\n       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>\n       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>\n       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span>       <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">lead_time</span> <span class=\"o\">=</span> <span class=\"mi\">6</span>\n<span class=\"n\">lower_left_latitude</span> <span class=\"o\">=</span> <span class=\"mf\">19.229</span>\n<span class=\"n\">lower_left_longitude</span> <span class=\"o\">=</span> <span class=\"mf\">233.7234</span>\n<span class=\"n\">map_proj</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">number_of_values</span> <span class=\"o\">=</span> <span class=\"mi\">3744965</span>\n<span class=\"n\">nx</span> <span class=\"o\">=</span> <span class=\"mi\">2345</span>\n<span class=\"n\">ny</span> <span class=\"o\">=</span> <span class=\"mi\">1597</span>\n<span class=\"n\">origin_longitude</span> <span class=\"o\">=</span> <span class=\"mf\">95.0</span>\n<span class=\"n\">plain</span> <span class=\"o\">=</span>\n<span class=\"n\">primary_missing_value</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n<span class=\"n\">reference_date</span> <span class=\"o\">=</span> <span class=\"mi\">2018120400</span>\n<span class=\"n\">secondary_missing_value</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n<span class=\"n\">standard_latitude</span> <span class=\"o\">=</span> <span class=\"mf\">25.0</span>\n<span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"n\">grid</span>\n</code></pre>\n</div>\n\n<p>You can also have <code>pytdlpack.TdlpackFile.read</code> read the entire file with optional keyword\n<code>all = True</code>.  Reading all records at once is not recommened if the file is large in size.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"nb\">all</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Here, x will become a list of instances of either <code>pytdlpack.TdlpackStationRecord</code>,\n<code>pytdlpack.TdlpackRecord</code>, or <code>pytdlpack.TdlpackTrailerRecord</code>.</p>\n\n<p>If the file being read a TDLPACK random-access (<code>format='random-access'</code>), then you can also provide the <code>id=</code>\nargument to search for a specific record.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pytdlpack</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">pytdlpack</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s1\">&#39;test.ra&#39;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">400001000</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">&#39;</span><span class=\"nc\">pytdlpack</span><span class=\"o\">.</span><span class=\"n\">_pytdlpack</span><span class=\"o\">.</span><span class=\"n\">TdlpackStationRecord</span><span class=\"s1\">&#39;&gt;</span>\n</code></pre>\n</div>\n\n<h2 id=\"div-idsection33-writing-a-tdlpack-file\"><div id='section3'>3) Writing a TDLPACK file.</h2>\n\n<p>Writing to a TDLPACK file is as easy as reading.  The following uses variable x, from\nabove, is an instance of <code>pytdlpack.TdlpackStationRecord</code> that has been packed.</p>\n\n<p>Example: Write to a new TDLPACK sequential file.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pytdlpack</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">&quot;new.sq&quot;</span><span class=\"p\">,</span><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">&quot;w&quot;</span><span class=\"p\">,</span><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s2\">&quot;sequential&quot;</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<h2 id=\"div-idsection44-creating-a-tdlpack-station-record\"><div id='section4'>4) Creating a TDLPACK Station Record.</h2>\n\n<p>The constructor for <code>pytdlpack.TdlpackStationRecord</code> provides two methods of\ninstantiation via the traditional <strong>kwargs (see <code>pytdlpack.TdlpackStationRecord.__init__</code>)\nor simply providing <code>ccall = ...</code> <em></strong>(recommended)</em>**.  The value passed to the <code>ccall=</code> argument can\nbe a single call letter string, list, tuple, or comma-delimited string of station call letter records.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pytdlpack</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">stations</span> <span class=\"o\">=</span> <span class=\"n\">pytdlpack</span><span class=\"o\">.</span><span class=\"n\">TdlpackStationRecord</span><span class=\"p\">([</span><span class=\"s1\">&#39;KBWI&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;KDCA&#39;</span><span class=\"p\">,</span><span class=\"s1\">&#39;KIAD&#39;</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">stations</span>\n<span class=\"n\">ccall</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;KBWI&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;KDCA&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;KIAD&#39;</span><span class=\"p\">]</span>\n<span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">400001000</span>         <span class=\"mi\">0</span>         <span class=\"mi\">0</span>         <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">ioctet</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">ipack</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">number_of_stations</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n</code></pre>\n</div>\n\n<h2 id=\"div-idsection55-creating-a-tdlpack-record\"><div id='section5'>5) Creating a TDLPACK Record.</h2>\n\n<p>The recommended method for creating a <code>pytdlpack.TdlpackRecord</code> is to pass the TDLPACK\nindentification arrays, plain language string, and data to the approproiate keyword.  Please\nsee <code>pytdlpack.TdlpackRecord.__init__</code> for more info.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">record</span> <span class=\"o\">=</span> <span class=\"n\">pytdlpack</span><span class=\"o\">.</span><span class=\"n\">TdlpackRecord</span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"o\">=</span><span class=\"mi\">2019070100</span><span class=\"p\">,</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">4210008</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"n\">lead</span><span class=\"o\">=</span><span class=\"mi\">24</span><span class=\"p\">,</span>\n<span class=\"n\">plain</span><span class=\"o\">=</span><span class=\"s2\">&quot;GFS WIND SPEED&quot;</span><span class=\"p\">,</span><span class=\"n\">grid</span><span class=\"o\">=</span><span class=\"n\">grid_def</span><span class=\"p\">,</span><span class=\"n\">data</span><span class=\"o\">=&lt;</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>The user is encouraged to read the official MOS-2000 documentation (specifically Chapter 5)\non construction of these arrays and proper encoding.</p>\n\n<h2 id=\"div-idsection66-packingunpacking-a-tdlpack-record\"><div id='section6'>6) Packing/Unpacking a TDLPACK Record.</h2>\n\n<p>Once any of the three classes of TDLPACK records have been instantiated, you can pack the\nrecord using the class method <code>pack</code>.  Using the example from <a href=\"#section5\">Section 5</a>, <code>record</code>\nis now an instance of <code>pytdlpack.TdlpackRecord</code>.  You can pack this record with the following:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">pack</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>To unpack a packed TDLPACK record, perform:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">unpack</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>The <code>pytdlpack.TdlpackRecord.unpack</code> class method for TDLPACK data records, contains optional\narguments <code>data=</code> (to control the unpacking of data) and <code>missing_value=</code> (to set a different\nmissing value other than what is contained in the record).  For TDLPACK data records,\n<code>pytdlpack.TdlpackRecord.unpack</code> automatically unpacks the TDLPACK meta-data.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">record</span><span class=\"o\">.</span><span class=\"n\">unpack</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span><span class=\"n\">missing_value</span><span class=\"o\">=-</span><span class=\"mf\">9999.0</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "tdlpackio.open", "modulename": "tdlpackio", "qualname": "open", "kind": "class", "doc": "<p>Open class for tdlpackio.</p>\n"}, {"fullname": "tdlpackio.open.__init__", "modulename": "tdlpackio", "qualname": "open.__init__", "kind": "function", "doc": "<p>Class Constructor</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p><strong><code>path : str</code></strong></p>\n\n<p>File name.</p>\n\n<p><strong><code>mode : str, optional, default = 'r'</code></strong></p>\n\n<p>File handle mode.  The default is open for reading ('r').</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;r&#39;</span></span>)</span>"}, {"fullname": "tdlpackio.open.mode", "modulename": "tdlpackio", "qualname": "open.mode", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "tdlpackio.open.name", "modulename": "tdlpackio", "qualname": "open.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "tdlpackio.open.filetype", "modulename": "tdlpackio", "qualname": "open.filetype", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "tdlpackio.open.records", "modulename": "tdlpackio", "qualname": "open.records", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "tdlpackio.open.size", "modulename": "tdlpackio", "qualname": "open.size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "tdlpackio.open.close", "modulename": "tdlpackio", "qualname": "open.close", "kind": "function", "doc": "<p>Close the file handle</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tdlpackio.open.select", "modulename": "tdlpackio", "qualname": "open.select", "kind": "function", "doc": "<p>Select TDLPACK records by <code>TdlpackRecord</code> attributes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tdlpackio.TdlpackRecord", "modulename": "tdlpackio", "qualname": "TdlpackRecord", "kind": "class", "doc": "<p>Creation class for TDLPACK Record.</p>\n"}, {"fullname": "tdlpackio.TdlpackStationRecord", "modulename": "tdlpackio", "qualname": "TdlpackStationRecord", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "tdlpackio.TdlpackStationRecord.__init__", "modulename": "tdlpackio", "qualname": "TdlpackStationRecord.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">_numberOfStations</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span>)</span>"}, {"fullname": "tdlpackio.TdlpackStationRecord.stations", "modulename": "tdlpackio", "qualname": "TdlpackStationRecord.stations", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list"}, {"fullname": "tdlpackio.TdlpackStationRecord.numberOfStations", "modulename": "tdlpackio", "qualname": "TdlpackStationRecord.numberOfStations", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "tdlpackio.TdlpackStationRecord.pack", "modulename": "tdlpackio", "qualname": "TdlpackStationRecord.pack", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tdlpackio.TdlpackStationRecord.unpack", "modulename": "tdlpackio", "qualname": "TdlpackStationRecord.unpack", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tdlpackio.TdlpackTrailerRecord", "modulename": "tdlpackio", "qualname": "TdlpackTrailerRecord", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "tdlpackio.TdlpackTrailerRecord.pack", "modulename": "tdlpackio", "qualname": "TdlpackTrailerRecord.pack", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tdlpackio.TdlpackTrailerRecord.unpack", "modulename": "tdlpackio", "qualname": "TdlpackTrailerRecord.unpack", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();